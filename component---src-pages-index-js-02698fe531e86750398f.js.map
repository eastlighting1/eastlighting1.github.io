{"version":3,"file":"component---src-pages-index-js-02698fe531e86750398f.js","mappings":"2OAiCA,MAvBA,SAAiBA,GAAY,IAATC,EAAID,EAAJC,KACZC,EAAQD,EAAKE,kBAAkBC,MAAMC,KAAI,SAAAC,GAAA,IAAGC,EAAID,EAAJC,KAAI,OAAO,IAAIC,EAAAA,EAAKD,EAAK,IAC3EE,EAA6BR,EAAKS,KAAKC,aAA/BC,EAAMH,EAANG,OAAQC,EAAQJ,EAARI,SACVC,EAAU,CAAI,OAAKC,QAAAC,EAAAA,EAAAA,GCbQ,SAACd,GAClC,IAAMe,EAAc,IAAIC,IAExB,OADAhB,EAAMiB,SAAQ,SAAAnB,GAAa,OAAAA,EAAVc,WAA4BK,SAAQ,SAACC,GAAQ,OAAKH,EAAYI,IAAID,EAAS,GAAC,KACtFJ,EAAAA,EAAAA,GAAIC,GAAaK,MAAK,SAACC,EAAGC,GAC/B,MAAU,aAAND,GAA0B,EACpB,aAANC,EAAyB,EACtB,CACT,GACF,CDKgCC,CAAoBvB,KAC5CwB,EAAmBZ,EAAWa,WAAU,SAACP,GAAQ,MAAkB,aAAbA,CAAuB,IACnFQ,GAAgCC,EAAAA,EAAAA,WAA+B,IAAtBH,EAA0B,EAAIA,GAAhEI,EAAQF,EAAA,GAAEG,EAAWH,EAAA,GACtBI,GAAmBC,EAAAA,EAAAA,cAAY,SAACC,EAAGC,GAAK,OAAKJ,EAAYI,EAAM,GAAE,IAEvE,OACEC,EAAAA,cAACC,EAAAA,EAAM,KACLD,EAAAA,cAACE,EAAAA,EAAG,CAACC,MAAM,SACXH,EAAAA,cAACI,EAAAA,EAAG,CAAC5B,OAAQA,EAAQC,SAAUA,IAC/BuB,EAAAA,cAACK,EAAAA,EAAQ,CACPvC,MAAOA,EACPwC,SAAUV,EACVW,KAAM7B,EACNgB,SAAUA,EACVc,gBAAc,IAItB,C","sources":["webpack://zoomkoding.com/./src/pages/index.js","webpack://zoomkoding.com/./src/utils/helpers.js"],"sourcesContent":["import React, { useCallback, useState } from 'react';\r\nimport { graphql } from 'gatsby';\r\nimport Layout from '../layout';\r\nimport Seo from '../components/seo';\r\nimport Bio from '../components/bio';\r\nimport Post from '../models/post';\r\n\r\nimport { getUniqueCategories } from '../utils/helpers';\r\nimport PostTabs from '../components/post-tabs';\r\n\r\nfunction HomePage({ data }) {\r\n  const posts = data.allMarkdownRemark.edges.map(({ node }) => new Post(node));\r\n  const { author, language } = data.site.siteMetadata;\r\n  const categories = ['All', ...getUniqueCategories(posts)];\r\n  const featuredTabIndex = categories.findIndex((category) => category === 'featured');\r\n  const [tabIndex, setTabIndex] = useState(featuredTabIndex === -1 ? 0 : featuredTabIndex);\r\n  const onTabIndexChange = useCallback((e, value) => setTabIndex(value), []);\r\n\r\n  return (\r\n    <Layout>\r\n      <Seo title=\"Home\" />\r\n      <Bio author={author} language={language} />\r\n      <PostTabs\r\n        posts={posts}\r\n        onChange={onTabIndexChange}\r\n        tabs={categories}\r\n        tabIndex={tabIndex}\r\n        showMoreButton\r\n      />\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default HomePage;\r\n\r\nexport const pageQuery = graphql`\r\n  query {\r\n    allMarkdownRemark(sort: { fields: frontmatter___date, order: DESC }) {\r\n      edges {\r\n        node {\r\n          id\r\n          excerpt(pruneLength: 500, truncate: true)\r\n          frontmatter {\r\n            categories\r\n            title\r\n            date(formatString: \"MMMM DD, YYYY\")\r\n          }\r\n          fields {\r\n            slug\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    site {\r\n      siteMetadata {\r\n        language\r\n        author {\r\n          name\r\n          bio {\r\n            role\r\n            description\r\n            thumbnail\r\n          }\r\n          social {\r\n            github\r\n            linkedIn\r\n            email\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","export const getUniqueCategories = (posts) => {\r\n  const categorySet = new Set();\r\n  posts.forEach(({ categories }) => categories.forEach((category) => categorySet.add(category)));\r\n  return [...categorySet].sort((a, b) => {\r\n    if (a === 'featured') return -1;\r\n    if (b === 'featured') return 1;\r\n    return 0;\r\n  });\r\n};\r\n"],"names":["_ref","data","posts","allMarkdownRemark","edges","map","_ref2","node","Post","_data$site$siteMetada","site","siteMetadata","author","language","categories","concat","_toConsumableArray","categorySet","Set","forEach","category","add","sort","a","b","getUniqueCategories","featuredTabIndex","findIndex","_useState","useState","tabIndex","setTabIndex","onTabIndexChange","useCallback","e","value","React","Layout","Seo","title","Bio","PostTabs","onChange","tabs","showMoreButton"],"sourceRoot":""}